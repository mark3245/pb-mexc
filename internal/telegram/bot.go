package telegram

import (
	"fmt"
	"math"
	"strconv"
	"strings"
	"time"

	"mexc-monitor/internal/database"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	log "github.com/sirupsen/logrus"
)

type Bot struct {
	api          *tgbotapi.BotAPI
	db           *database.Database
	stopChan     chan struct{}
	allowedUsers map[int64]bool
}

func NewBot(token string, db *database.Database) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	return &Bot{
		api:          api,
		db:           db,
		stopChan:     make(chan struct{}),
		allowedUsers: make(map[int64]bool),
	}, nil
}

func (b *Bot) Start() error {
	log.Info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

	_, err := b.api.GetMe()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: %v", err)
	}

	log.Info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	log.Info("‚úÖ –ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")

	for {
		select {
		case update := <-updates:
			if update.Message == nil {
				continue
			}

			log.Infof("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s",
				update.Message.From.ID, update.Message.Text)

			if update.Message.IsCommand() {
				b.handleCommand(update.Message)
			}
		case <-b.stopChan:
			log.Info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
			return nil
		}
	}
}

func (b *Bot) Stop() {
	close(b.stopChan)
}

func (b *Bot) handleCommand(message *tgbotapi.Message) {
	command := message.Command()
	args := message.CommandArguments()

	switch command {
	case "start":
		b.handleStartCommand(message)
	case "set":
		b.handleSetCommand(message, args)
	case "status":
		b.handleStatusCommand(message)
	case "blacklist":
		b.handleBlacklistCommand(message, args)
	case "help":
		b.handleHelpCommand(message)
	case "test":
		b.handleTestCommand(message)
	default:
		b.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
	}
}

func (b *Bot) handleSetCommand(message *tgbotapi.Message, args string) {
	parts := strings.Fields(args)
	if len(parts) != 2 {
		b.sendMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set <–ø–∞—Ä–∞–º–µ—Ç—Ä> <–∑–Ω–∞—á–µ–Ω–∏–µ>\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: time, volume, change")
		return
	}

	param := parts[0]
	valueStr := parts[1]

	settings, err := b.db.GetSettings()
	if err != nil {
		log.Errorf("Failed to get settings: %v", err)
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
		return
	}

	switch param {
	case "time":
		value, err := strconv.Atoi(valueStr)
		if err != nil || value <= 0 {
			b.sendMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
			return
		}
		settings.TimeInterval = value
		b.sendMessage(message.Chat.ID, fmt.Sprintf("–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ %d —Å–µ–∫—É–Ω–¥", value))

	case "volume":
		value, err := strconv.Atoi(valueStr)
		if err != nil || value <= 0 {
			b.sendMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
			return
		}
		settings.MinVolume = value
		b.sendMessage(message.Chat.ID, fmt.Sprintf("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ $%d", value))

	case "change":
		value, err := strconv.ParseFloat(valueStr, 64)
		if err != nil || value <= 0 {
			b.sendMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
			return
		}
		settings.PriceChange = value
		b.sendMessage(message.Chat.ID, fmt.Sprintf("–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ %.2f%%", value))

	default:
		b.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –î–æ—Å—Ç—É–ø–Ω—ã–µ: time, volume, change")
		return
	}

	if err := b.db.UpdateSettings(settings); err != nil {
		log.Errorf("Failed to update settings: %v", err)
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
		return
	}
}

func (b *Bot) handleStatusCommand(message *tgbotapi.Message) {
	settings, err := b.db.GetSettings()
	if err != nil {
		log.Errorf("Failed to get settings: %v", err)
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
		return
	}

	status := fmt.Sprintf("üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"+
		"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏: %d —Å–µ–∫—É–Ω–¥\n"+
		"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: %.2f%%\n"+
		"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: $%d\n",
		settings.TimeInterval, settings.PriceChange, settings.MinVolume)

	b.sendMessage(message.Chat.ID, status)
}

func (b *Bot) handleBlacklistCommand(message *tgbotapi.Message, args string) {
	parts := strings.Fields(args)

	if len(parts) == 0 {
		entries, err := b.db.GetBlacklist()
		if err != nil {
			log.Errorf("Failed to get blacklist: %v", err)
			b.sendMessage(message.Chat.ID, "Error getting blacklist")
			return
		}

		if len(entries) == 0 {
			b.sendMessage(message.Chat.ID, "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
			return
		}

		var response strings.Builder
		response.WriteString("üö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n\n")
		for _, entry := range entries {
			remaining := time.Until(entry.ExpiresAt)
			response.WriteString(fmt.Sprintf("‚Ä¢ %s (–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ %s)\n",
				entry.Symbol, formatDuration(remaining)))
		}
		b.sendMessage(message.Chat.ID, response.String())
		return
	}

	if len(parts) != 2 {
		b.sendMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /blacklist <—Å–∏–º–≤–æ–ª> <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–≤_—Å–µ–∫—É–Ω–¥–∞—Ö>\n–ü—Ä–∏–º–µ—Ä: /blacklist BTC 3600")
		return
	}

	symbol := strings.ToUpper(parts[0])
	durationStr := parts[1]

	duration, err := strconv.Atoi(durationStr)
	if err != nil || duration <= 0 {
		b.sendMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (—Å–µ–∫—É–Ω–¥—ã).")
		return
	}

	if err := b.db.AddToBlacklist(symbol, time.Duration(duration)*time.Second); err != nil {
		log.Errorf("Failed to add to blacklist: %v", err)
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
		return
	}

	b.sendMessage(message.Chat.ID, fmt.Sprintf("–î–æ–±–∞–≤–ª–µ–Ω–æ %s –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ %s",
		symbol, formatDuration(time.Duration(duration)*time.Second)))
}

func (b *Bot) handleStartCommand(message *tgbotapi.Message) {
	b.AddUser(message.Chat.ID)

	welcomeMsg := `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MEXC Monitor Bot!

–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã –∏ –æ–±—ä–µ–º—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ –±–∏—Ä–∂–µ MEXC –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∞—Ç—å –∞–ª–µ—Ä—Ç—ã
‚Ä¢ /status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ /set time (—Å–µ–∫—É–Ω–¥—ã) - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚Ä¢ /set volume (—Å—É–º–º–∞) - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
‚Ä¢ /set change (–ø—Ä–æ—Ü–µ–Ω—Ç) - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
‚Ä¢ /blacklist (—Å–∏–º–≤–æ–ª) (—Å–µ–∫—É–Ω–¥—ã) - –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
‚Ä¢ /blacklist - –ü–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ /test - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç

–ü—Ä–∏–º–µ—Ä—ã:
/set time 5
/set volume 5000
/set change 2.5`

	b.sendMessage(message.Chat.ID, welcomeMsg)

	go func() {
		time.Sleep(2 * time.Second)
		b.SendAlert("TEST/USDT", 2.5, 15000, time.Now())
	}()
}

func (b *Bot) handleHelpCommand(message *tgbotapi.Message) {
	helpMsg := `üìã –ö–æ–º–∞–Ω–¥—ã MEXC Monitor Bot:

üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ /set time (—Å–µ–∫—É–Ω–¥—ã) - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)
‚Ä¢ /set volume (—Å—É–º–º–∞) - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ USD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5000)
‚Ä¢ /set change (–ø—Ä–æ—Ü–µ–Ω—Ç) - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2.0)

üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ /status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ /blacklist - –ü–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç

üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º:
‚Ä¢ /blacklist (—Å–∏–º–≤–æ–ª) (—Å–µ–∫—É–Ω–¥—ã) - –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –ü—Ä–∏–º–µ—Ä: /blacklist BTC 3600 (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å BTC –Ω–∞ 1 —á–∞—Å)

üìà –ê–ª–µ—Ä—Ç—ã:
–ê–ª–µ—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–æ–≥–¥–∞:
- –¶–µ–Ω–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏
- –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
- –ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/set time 10
/set volume 10000
/set change 3.0
/blacklist DOGE 1800`

	b.sendMessage(message.Chat.ID, helpMsg)
}

func (b *Bot) handleTestCommand(message *tgbotapi.Message) {
	b.sendMessage(message.Chat.ID, "üß™ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞...")

	if err := b.SendAlert("TEST/USDT", 2.5, 15000, time.Now()); err != nil {
		b.sendMessage(message.Chat.ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç")
	} else {
		b.sendMessage(message.Chat.ID, "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
	}
}

func (b *Bot) SendAlert(symbol string, priceChange float64, volume int, timestamp time.Time) error {
	message := formatAlertMessage(symbol, priceChange, volume, timestamp)

	log.Infof("–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", len(b.allowedUsers))

	for userID := range b.allowedUsers {
		msg := tgbotapi.NewMessage(userID, message)
		msg.ParseMode = "HTML"

		if _, err := b.api.Send(msg); err != nil {
			log.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userID, err)
		} else {
			log.Infof("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", userID)
		}
	}

	if len(b.allowedUsers) == 0 {
		log.Warn("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É —Å–Ω–∞—á–∞–ª–∞!")
	}

	return nil
}

func (b *Bot) AddUser(userID int64) {
	b.allowedUsers[userID] = true
	log.Infof("–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö", userID)
}

func (b *Bot) RemoveUser(userID int64) {
	delete(b.allowedUsers, userID)
	log.Infof("–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö", userID)
}

func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	if _, err := b.api.Send(msg); err != nil {
		log.Errorf("Failed to send message: %v", err)
	}
}

func formatAlertMessage(symbol string, priceChange float64, volume int, timestamp time.Time) string {
	priceChangeStr := fmt.Sprintf("%.2f%%", priceChange)
	if priceChange > 0 {
		priceChangeStr = "+" + priceChangeStr
	}

	volumeStr := formatVolume(volume)

	volumeEmojis := getVolumeEmojis(volume)
	priceEmojis := getPriceEmojis(priceChange)

	timeStr := timestamp.Format("15:04:05")

	return fmt.Sprintf("‚ö° <b>ALERT</b>\n\n"+
		"<b>%s</b>\n\n"+
		"üìà <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã:</b> %s %s\n"+
		"üí∞ <b>–û–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤:</b> %s %s\n"+
		"‚è∞ <b>–í—Ä–µ–º—è:</b> %s",
		symbol, priceChangeStr, priceEmojis, volumeStr, volumeEmojis, timeStr)
}

func formatVolume(volume int) string {
	if volume >= 1000000 {
		return fmt.Sprintf("%.1fM", float64(volume)/1000000)
	} else if volume >= 1000 {
		return fmt.Sprintf("%.1fK", float64(volume)/1000)
	}
	return fmt.Sprintf("%d", volume)
}

func getVolumeEmojis(volume int) string {
	if volume < 10000 {
		return ""
	} else if volume < 50000 {
		return "üëÅ"
	} else if volume < 100000 {
		return "üëÅüî•"
	} else if volume < 150000 {
		return "üëÅüî•üî•"
	} else if volume < 200000 {
		return "üëÅüî•üî•üî•"
	} else {
		fireCount := (volume-200000)/50000 + 3
		if fireCount > 10 {
			fireCount = 10
		}
		fires := strings.Repeat("üî•", fireCount)
		return "üëÅ" + fires
	}
}

func getPriceEmojis(priceChange float64) string {
	change := math.Abs(priceChange)

	circleCount := int(change/10) + 1
	if circleCount > 10 {
		circleCount = 10
	}

	return strings.Repeat("üîµ", circleCount)
}

func formatDuration(d time.Duration) string {
	if d < time.Minute {
		return fmt.Sprintf("%ds", int(d.Seconds()))
	} else if d < time.Hour {
		return fmt.Sprintf("%dm", int(d.Minutes()))
	} else {
		hours := int(d.Hours())
		minutes := int(d.Minutes()) % 60
		if minutes == 0 {
			return fmt.Sprintf("%dh", hours)
		}
		return fmt.Sprintf("%dh%dm", hours, minutes)
	}
}
